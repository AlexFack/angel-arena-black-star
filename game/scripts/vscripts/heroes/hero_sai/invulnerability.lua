LinkLuaModifier("modifier_sai_invulnerability", "heroes/hero_sai/invulnerability.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier("modifier_sai_invulnerability_bonus_damage", "heroes/hero_sai/invulnerability.lua", LUA_MODIFIER_MOTION_NONE)

sai_invulnerability = class({})

if IsServer() then
	function sai_invulnerability:OnSpellStart()
		local caster = self:GetCaster()
		caster:Purge(false, true, false, true, false)
		caster:AddNewModifier(caster, self, "modifier_sai_invulnerability", {duration = self:GetSpecialValueFor("duration")})
	end
end

modifier_sai_invulnerability = class({
	IsHidden = function() return false end,
})

function modifier_sai_invulnerability:DeclareFunctions()
	return {
		MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE,
		MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE,
		MODIFIER_EVENT_ON_TAKEDAMAGE,
		MODIFIER_PROPERTY_MOVESPEED_LIMIT
	}
end

function modifier_sai_invulnerability:GetModifierTotalDamageOutgoing_Percentage()
	return -self:GetAbility():GetSpecialValueFor("damage_reduction_pct")
end

function modifier_sai_invulnerability:GetModifierMoveSpeed_Limit()
	return self:GetAbility():GetSpecialValueFor("movement_speed_constant")
end

function modifier_sai_invulnerability:GetModifierIncomingDamage_Percentage()
	return -self:GetAbility():GetSpecialValueFor("damage_reduction_pct")
end

if IsServer() then
	function modifier_sai_invulnerability:OnCreated()
		local parent = self:GetParent()
		self.DamageSaved = 0
		self:AddParticle(ParticleManager:CreateParticle("particles/arena/units/heroes/hero_sai/invulnerability.vpcf", PATTACH_POINT_FOLLOW, parent, nil, 5), false, false, 10, false, false)
	end

	function modifier_sai_invulnerability:OnTakeDamage(keys)
		local parent = self:GetParent()
		local ability = self:GetAbility()
		keys.damage = keys.damage * (1 + ability:GetSpecialValueFor("damage_reduction_pct") * 0.01)

		if keys.attacker:IsConsideredHero() and keys.unit == parent then
			self.DamageSaved = self.DamageSaved + math.ceil(keys.damage * ability:GetSpecialValueFor("damage_reduction_pct") * 0.01)
		end
	end

	function modifier_sai_invulnerability:OnDestroy()
		if self.DamageSaved == 0 then
			return
		end
		self:GetParent():AddNewModifier(parent, self, "modifier_sai_invulnerability_bonus_damage", {duration = self:GetAbility():GetSpecialValueFor("bonus_damage_duration")})
		modifier_sai_invulnerability_bonus_damage.damage = self.DamageSaved
	end
end

modifier_sai_invulnerability_bonus_damage = class({
	IsPurgable = function() return true end
})

function modifier_sai_invulnerability_bonus_damage:DeclareFunctions()
	return {
		MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE
	}
end

if IsServer() then
	function modifier_sai_invulnerability_bonus_damage:GetModifierPreAttack_BonusDamage()
		return self.damage
	end

	--[[function modifier_sai_invulnerability_bonus_damage:OnAttackLanded(keys)
		local parent = self:GetParent()
		if keys.attacker == parent then
			if not self.damage_current then
				self.damage_current = self.damage - self.damage / self.attacks_count
			elseif self.damage_current > 0 then
				self.damage_current = self.damage_current - self.damage / self.attacks_count
			end
			if self.damage_current <= 0 then
				--parent:RemoveModifierByName("modifier_sai_invulnerability_bonus_damage")
			end
		end
	end]]
end